package SupportClasses;

import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Pattern;
import org.openqa.selenium.By;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import Data_Structures.Account_Data;

@Listeners(SupportClasses.TestNG_TestListener.class)

public class Account_Lookup extends Helper_Functions{
	static String LevelToTest = "3";

	@BeforeClass
	public void beforeClass() {
		Environment.SetLevelsToTest(LevelToTest);
	}
	
	@DataProvider (parallel = true)
	public static Iterator<Object[]> dp() {
		List<Object[]> data = new ArrayList<Object[]>();
		
		//String AccountsNumbers[] = new String[] {"761391380", "761391500", "761391640", "761391720", "761391780", "761391860"};
		//String AccountsNumbers[] = new String[] {"642531069", "642141724", "642141740", "642531565", "642531581", "642531603", "642531620", "642569147", "642569163", "642141783", "642141805", "642141821", "642142240", "642142267", "642142283", "642569309", "642569325", "642569341", "642569368", "642569384", "642569406", "642304305", "642304321", "642304348", "642142364", "642142380", "642142402", "642304542", "642304569", "642304585", "642304623", "642304640", "642304666", "642570048", "642570064", "642570080", "642143000", "642143026", "642143042", "642570102", "642570129", "642570145", "642009567", "642009583", "642009605", "642304682", "642304704", "642304720", "642304747", "642304763", "642304780", "642009508", "642009524", "642009540", "642304801", "642304828", "642304844", "642304887", "642304909", "642304925", "642304941", "642304968", "642304984", "642305000", "642305026", "642305042", "642305069", "642305085", "642305107", "642211544", "642211560", "642211587", "642211641", "642211668", "642211684", "642211706", "642211722", "642211749", "642211781", "642211803", "642211820", "642211846", "642211862", "642211889", "642211900", "642211927", "642211943", "642211960", "642211986", "642212001", "642212109", "642212125", "642212141", "642212044", "642212060", "642212087", "642212206", "642212222", "642212249", "642212265", "642212281", "642212303", "642212362", "642212389", "642212400", "642212427", "642212443", "642212460", "642212486", "642212508", "642212524", "642212567", "642212583", "642212605", "642212621", "642212648", "642212664", "642212702", "642212729", "642212745", "642212761", "642212788", "642212800", "642212826", "642212842", "642212869", "642455621", "642455648", "642455664", "642455680", "642455702", "642455729", "642455745", "642455761", "642455788", "642455826", "642455842", "642455869", "642455966", "642455982", "642456008", "642456024", "642456040", "642456067", "642456083", "642456105", "642456121", "642456148", "642456164", "642456180", "642456229", "642456245", "642456261", "642456300", "642456326", "642456288", "642456342", "642456369", "642456385", "642456440", "642456466", "642456482", "642456504", "642456520", "642456547", "642456563", "642494104", "642494120", "642494163", "642494180", "642494201", "642494228", "642494244", "642494260", "642494309", "642494325", "642494341", "642494384", "642494406", "642494422", "642494449", "642494465", "642494481", "642494503", "642494520", "642494546", "642494562", "642494589", "642494600", "642494627", "642494643", "642494660", "642494686", "642494708", "642494724", "642537407", "642537423", "642537440", "642537482", "642537504", "642537520", "642537547", "642537563", "642537580", "642537601", "642537628", "642537644", "642097903", "642097920", "642097946", "642097962", "642097989", "642098004", "642098020", "642098047", "642098063", "642098080", "642098101", "642098128", "642098144", "642098160", "642098187", "642098209", "642098225", "642098241", "642098268", "642098284", "642098306", "642098322", "642098349", "642098365", "642305140", "642305166", "642305182", "642098381", "642098403", "642098420", "642098446", "642098462", "642098489", "642098500", "642098527", "642098543", "642098560", "642098586", "642098608", "642098624", "642098640", "642098667", "642098683", "642098705", "642098721", "642098748", "642098764", "642098780", "642098802", "642136380", "642136402", "642136429", "642136445", "642136461", "642136488", "642136500", "642136526", "642136542", "642136569", "642136585", "642136607", "642136623", "642136640", "642136666", "642136682", "642136704", "642136720", "642136747", "642136763", "642136780", "642136801", "642136828", "642136844", "642136860", "642136887", "642136909", "642136925", "642136941", "642136968", "642136984", "642137000", "642137026", "642137042", "642137069", "642137085", "642137107", "642137123", "642137140", "642137166", "642137182", "642137204", "642137220", "642137247", "642137263", "642137280", "642137301", "642137328", "642137344", "642137360", "642137387", "642137409", "642137425", "642305204", "642305220", "642305247", "642137565", "642137581", "642137603", "642137620", "642137646", "642137662", "642137689", "642137700", "642137727", "642137743", "642137760", "642137786", "642137824", "642137840", "642137867", "642137883", "642137905", "642137921", "642137948", "642137964", "642137980", "642138006", "642138022", "642138049", "642138065", "642138081", "642138103", "642305263", "642305280", "642305301", "642138464", "642138480", "642138502", "642138529", "642138545", "642138561", "642138588", "642138600", "642138626", "642138642", "642138669", "642138685", "642138707", "642138723", "642138740", "642138766", "642138782", "642138804", "642138820", "642138847", "642138863", "642138880", "642176404", "642176420", "642305328", "642305344", "642305360", "642176447", "642176463", "642176480", "642176501", "642176528", "642176544", "642176560", "642176587", "642176609", "642176625", "642176641", "642176668", "642142941", "642142968", "642142984", "642142887", "642142909", "642142925", "642176684", "642176706", "642176722", "642176749", "642176765", "642176781", "642176803", "642176820", "642176846", "642176862", "642176889", "642176900", "642176927", "642176943", "642176960", "642176986", "642177001", "642177028", "642177044", "642177060", "642177087", "642177109", "642177125", "642177141", "642305387", "642305409", "642305425", "642143069", "642143085", "642143107", "642143166", "642143182", "642143204", "642305441", "642305468", "642305484", "642177400", "642177427", "642177443", "642305506", "642305522", "642305549", "642177460", "642177486", "642177508", "642177524", "642177540", "642177567", "642177583", "642177605", "642177621", "642177648", "642177664", "642177680", "642177702", "642177729", "642177745", "642305565", "642305581", "642305603", "642305646", "642305662", "642305689", "642177761", "642177788", "642177800", "642177826", "642177842", "642177869", "642177885", "642177907", "642177923", "642177940", "642177966", "642177982", "642178008", "642178024", "642178040", "642306065", "642306081", "642306103", "642178067", "642178083", "642178105", "642178121", "642178148", "642178164", "642178180", "642178202", "642178229", "642178245", "642178261", "642178288", "642306120", "642306146", "642306162", "642178300", "642178326", "642178342", "642306308", "642306324", "642306340", "642142763", "642142780", "642142801", "642142682", "642142704", "642142720", "642142623", "642142640", "642142666", "642142569", "642142585", "642142607", "642178369", "642178385", "642178407", "642142500", "642142526", "642142542", "642178423", "642178440", "642178466", "642142445", "642142461", "642142488", "642178547", "642178563", "642178580", "642306367", "642306383", "642306405", "642178601", "642178628", "642178644", "642178660", "642178687", "642178709", "642142305", "642142321", "642142348", "642306421", "642306448", "642306464", "642177346", "642177362", "642177389", "642306480", "642344005", "642344021", "642177281", "642177303", "642177320", "642177222", "642177249", "642177265", "642177168", "642177184", "642177206"};

		String AccountsNumbers[] = new String[] {"642210360", "642210386", "642210408", "642210424", "642450549", "642450565", "642450581", "642450603", "642450620", "642450646", "642450662", "642450689", "642450700", "642450727", "642489267", "642489283", "642489305", "642489321", "642489348", "642489364", "642489380", "642489402", "642489429", "642489445", "642450344", "642450360", "642450387", "642450409", "642450425", "642450441", "642450468", "642450484", "642450506", "642450522", "642489461", "642489488", "642489500", "642489526", "642489542", "642489569", "642489585", "642489607", "642489623", "642489640", "642489461", "642489488", "642489500", "642489526", "642489542", "642489569", "642489585", "642489607", "642489623", "642489640", "642530623", "642530640", "642530666", "642530682", "642530704", "642530720", "642530747", "642530763", "642530780", "642530801", "642530828", "642530844", "642530860", "642530887", "642530909", "642530925", "642530941", "642530968", "642530984", "642531000", "642570188", "642570200", "642570226", "642570242", "642570269", "642570285", "642570307", "642570323", "642570340", "642570366", "642570382", "642570404", "642570420", "642570447", "642570463", "642570480", "642570501", "642570528", "642570544", "642570560", "642570587", "642570609", "642570625", "642570641", "642570668", "642570684", "642570706", "642570722", "642570749", "642570765", "642570781", "642570803", "642570820", "642570846", "642570862", "642570889", "642570900", "642570927", "642570943", "642570960", "642570986", "642571001", "642571028", "642571044", "642571060", "642571087", "642571109", "642571125", "642571141", "642571168", "642571184", "642571206", "642571222", "642571249", "642571265", "642571281", "642571303", "642571320", "642571346", "642571362", "642571443", "642571460", "642571486", "642571508", "642571524", "642571540", "642571567", "642571583", "642571605", "642571621", "641968781", "641968803", "641968820", "641968846", "641968862", "641968889", "641968900", "641968927", "641968943", "641968960", "641968986", "641969001", "641969028", "641969044", "641969060", "641969087", "641969109", "641969125", "641969141", "641969168", "641969206", "641969222", "641969249", "641969265", "641969281", "641969303", "641969320", "641969346", "641969362", "641969389", "641969400", "641969427", "641969443", "641969460", "641969486", "641969508", "641969524", "641969540", "641969567", "641969583", "641969605", "641969621", "641969648", "641969664", "641969680", "641969702", "641969729", "641969745", "641969761", "641969788", "641969800", "641969826", "641969842", "641969869", "641969885", "641969907", "641969923", "641969940", "641969966", "641969982", "641970000", "641970026", "641970042", "641970069", "641970085", "641970107", "641970123", "641970140", "641970166", "641970182", "641970204", "641970220", "641970247", "641970263", "641970280", "641970301", "641970328", "641970344", "641970360", "641970387", "641970409", "641970425", "641970441", "641970468", "641970484", "641970506", "641970522", "641970549", "641970565", "641970581", "641970603", "641970620", "641970646", "641970662", "641970689", "641970700", "641970727", "641970743", "641970760", "641970786", "641970808", "641970824", "641970840", "641970867", "641970883", "641970905", "641970921", "641970948", "641970964", "641970980", "641971006", "641971022", "641971049", "641971065", "641971081", "641971103", "641971120", "641971146", "641971162", "641971189", "641971200", "641971227", "641971243", "641971260", "642008820", "642008846", "642008862", "642008889", "642008900", "642008927", "642009621", "642009648", "642009664", "642009680", "642009702", "642009729", "642009745", "642009761", "642009788", "642009800", "642009826", "642009842", "642009869", "642009885", "642009907", "642009923", "642009940", "642009966", "642009982", "642010000", "642010026", "642010042", "642010069", "642010085", "642010107", "642010123", "642010140", "642010166", "642010182", "642010204", "642010220", "642010247", "642010263", "642010280", "642010301", "642010328", "642010344", "642010360", "642010387", "642010409", "642010425", "642010441", "642010468", "642010484", "642010506", "642010522", "642010549", "642010565", "642010581", "642010603", "642010620", "642010646", "642010662", "642010689", "642010700", "642010727", "642010743", "642010760", "642010786", "642010808", "642010824", "642010840", "642010867", "642010883", "642010905", "642010921", "642010948", "642010964", "642010980", "642011006", "642011022", "642011049", "642011065", "642011081", "642011103", "642011120", "642011146", "642011162", "642011189", "642011200", "613947345", "613977864", "613953027", "642011227", "642011243", "642011260", "642011286", "642011308", "642048821", "642048848", "642048864", "642048880", "642048902", "642048929", "642048945", "642048961", "642048988", "642049003", "642049020", "642049046", "642049062", "642049089", "642049100", "642049127", "642049143", "642049160", "642049186", "642049208", "642049224", "642049240", "642049267", "642049283", "642049305", "642049321", "642049348", "642049364", "642049380", "642049402", "642049429", "642049445", "642049461", "642049488", "642049500", "642049526", "642049542", "642049569", "642049585", "642049607", "642049623", "642049640", "642049666", "642049682", "642049704", "642049720", "642049747", "642049763", "642049780", "642049801", "642049828", "642049844", "642049860", "642049887", "642049909", "642049925", "642049941", "642049968", "642049984", "642050001", "642050028", "642050044", "642050060", "642050087", "642050109", "642050125", "642050141", "642050168", "642050184", "642050206", "642050222", "642050249", "642050265", "642050281", "642050303", "642050320", "642050346", "642050362", "642050389", "642050400", "642050427", "642050443", "642050460", "642050486", "642050508", "642050524", "642050540", "642050567", "642050583", "642050605", "642050621", "642050648", "642050664", "642050680", "642050702", "642050729", "642050745", "642050761", "642050788", "642050800", "642050826", "642050842", "642050869", "642050885", "642050907", "642050923", "642050940", "642050966", "642050982", "642051008", "642051024", "642051040", "642051067", "642051083", "642051105", "642051121", "642051148", "642051164", "642051180", "642051202", "642051229", "642051245", "642051261", "642051288", "642051300", "642088823", "642088840", "642088866", "642088882", "642088904", "642088920", "642088947", "642088963", "642088980", "642089005", "642089021", "642089048", "642089064", "642089080", "642089102", "642089129", "642089145", "642089161", "642089188", "642089200", "642089226", "642089242", "642089269", "642089285", "642089307", "642089323", "642089340", "642089366", "642089382", "642089404", "642089420", "642089447", "642089463", "642089480", "642089501", "642089528", "642089544", "642089560", "642089587", "642089609", "642089625", "642089641", "642089668", "642089684", "642089706", "642089722", "642089749", "642089765", "642089781", "642089803", "642089820", "642089846", "642089862", "642089889", "642089900", "642089927", "642089943", "642089960", "642089986", "642090003", "642090020", "642090046", "642090062", "642090089", "642090100", "642090127", "642090143", "642090160", "642090186", "642090208", "642090224", "642090240", "642090267", "642090283", "642090305", "642090321", "642090348", "642090364", "642090380", "642090402", "642090429", "642090445", "642090461", "642090488", "642090500", "642090526", "642090542", "642090569", "642090585", "642090607", "642090623", "642090640", "642090666", "642090682", "642090704", "642090720", "642090747", "642090763", "642090780", "642090801", "642090828", "642090844", "642090860", "642090887", "642090909", "642090925", "642090941", "642090968", "642090984", "642091000", "642091026", "642091042", "642091069", "642091085", "642091107", "642091123", "642091140", "642091166", "642091182", "642091204", "642091220", "642091247", "642091263", "642091280", "642091301", "642128884", "642128906", "642128922", "642128949", "642128965", "642128981", "642129007", "642129023", "642129040", "642129066", "642129082", "642129104", "642129120", "642129147", "642129163", "642129180", "642129201", "642129228", "642129244", "642129260", "642129287", "642129309", "642129325", "642129341", "642129368", "642129384", "642129406", "642129422", "642129449", "642129465", "642129481", "642129503", "642129520", "642129546", "642129562", "642129589", "642129600", "642129627", "642129643", "642129660", "642129686", "642129708", "642129724", "642129740", "642129767", "642129783", "642129805", "642129821", "642129848", "642129864", "642129880", "642129902", "642129929", "642129945", "642129961", "642129988", "642130005", "642130021", "642130048", "642130064", "642130080", "642130102", "642130129", "642130145", "642130161", "642130382", "642130404", "642130420", "642130447", "642130463", "642130480", "642130501", "642130528", "642130544", "642130560", "642130587", "642130609", "642130625", "642130641", "642130668", "642130684", "642130706", "642130722", "642130749", "642130765", "642130781", "642130803", "642130820", "642130846", "642130862", "642130889", "642130900", "642130927", "642130943", "642130960", "642130986", "642131001", "642131028", "642131044", "642131060", "642131087", "642131109", "642131125", "642131141", "642131168", "642131184", "642131206", "642131222", "642131249", "642131265", "642131281", "642131303", "642131320", "642131346", "642131362", "642169106", "642169122", "642169149", "642169165", "642169181", "642169203", "642169220", "642169246", "642169262", "642169289", "642169300", "642169327", "642169343", "642169360", "642169386", "642169408", "642169424", "642169440", "642169467", "642169483", "642169505", "642169521", "642169548", "642169564", "642169580", "642169602", "642169629", "642169645", "642169661", "642169688", "642169700", "642169726", "642169742", "642169769", "642169785", "642169807", "642169823", "642169840", "642169866", "642169882", "642169904", "642169920", "642169947", "642169963", "642169980", "642170007", "642170023", "642170040", "642170066", "642170082", "642170104", "642170120", "642170147", "642170163", "642170180", "642170201", "642170228", "642170244", "642170260", "642170287", "642170309", "642170325", "642170341", "642170368", "642170384", "642170406", "642170422", "642170449", "642170465", "642170481", "642170503", "642170520", "642170546", "642170562", "642170589", "642170600", "642170627", "642170643", "642170660", "642170686", "642170708", "642170724", "642170740", "642170767", "642170783", "642170805", "642170821", "642170848", "642170864", "642170880", "642170902", "642170929", "642170945", "642170961", "642170988", "642171003", "642171020", "642171046", "642171062", "642171089", "642171100", "642171127", "642171143", "642171160", "642171186", "642171208", "642171224", "642171240", "642171267", "642171283", "642171305", "642171321", "642171348", "642171364", "642171380", "642208942", "642208969", "642208985", "642209000", "642209027", "642209043", "642209060", "642209086", "642209108", "642209124", "642209140", "642209167", "642209183", "642209205", "642209221", "642209248", "642209264", "642209280", "642209302", "642209329", "642209345", "642209361", "642209388", "642209400", "642209426", "642209442", "642209469", "642209485", "642209507", "642209523", "642209540", "642209566", "642209582", "642209604", "642209620", "642209647", "642209663", "642209680", "642209701", "642209728", "642209744", "642209760", "642209787", "642209809", "642209825", "642209841", "642209868", "642209884", "642209906", "642209922", "642209949", "642209965", "642209981", "642210009", "642210025", "642210041", "642210068", "642210084", "642210106", "642210122", "642210149", "642210165", "642210181", "642210203", "642210220"};

		DriverFactory.WaitTimeOut = 5;
		Account_Data Data[] = Environment.getAccountDetails(LevelToTest);
		String AccountsAlreadyPresent = "", PendingAdd = "{\"";
		for (int i = 0; i < Data.length - 1; i++) {
			AccountsAlreadyPresent+= Data[i].Account_Number + " ";
		}
		for (String S: AccountsNumbers) {
			if (!AccountsAlreadyPresent.contains(S)) {
				data.add( new Object[] {LevelToTest, S});
				PendingAdd+= S + "\", \"";
			}
		}	
		PrintOut(data.size() + "\n" + PendingAdd, false);

		return data.iterator();
	}
	
	@Test(dataProvider = "dp")
	public static void AccountCheck(String Level, String Account_Number){
		
		//Helper_Functions.PrintOut("breakpoint", false);
		try {
			
			Account_Data Account_Info[] = new Account_Data[] {Account_DataAccountDetails(Account_Number, Level)};
			Create_Accounts.writeAccountsToExcel(Account_Info);
		} catch (Exception e) {
			Assert.fail(e.getMessage());
		}
	}
	
	//String[] {Streetline1 - 0, Streetline2 - 1, City - 2, State - 3, StateCode - 4, postalCode - 5, countryCode - 6};
	public static Account_Data Account_DataAccountDetails(String AccountNumber, String Level) throws Exception{
		Account_Data Account_Details = new Account_Data();
		String Streetline1 = "", Streetline2 = "", City ="", State ="", StateCode = "", postalCode = "", countryCode = "", areaCode = "", phoneNumber = "";
		Environment.getInstance().setLevel(Level);
		String TempLevel = "L" + Environment.getInstance().getLevel();
		Account_Details.Level = Environment.getInstance().getLevel();
		if (!"L1L2L3L4".contains(TempLevel)){
			PrintOut("Invalid Level to find account number detials, checking account vs L3", true);
			TempLevel = "L3";
		}
 		try {
 			PrintOut("Account number " + AccountNumber + " recieved from " + Thread.currentThread().getStackTrace()[2].getMethodName(), true);
 			WebDriver_Functions.ChangeURL("JSP", "US", false);
 			WebDriver_Functions.WaitPresent(By.name("contactAccountOpCo"));
 			WebDriver_Functions.Type(By.name("contactAccountNumber"), AccountNumber);
 			WebDriver_Functions.Type(By.name("contactAccountOpCo"), "FX");

 		    //selects the correct radio button for the level, only works for 1,2,3,4
 			WebDriver_Functions.Click(By.xpath("//input[(@name='contactLevel') and (@value = '" + TempLevel + "')]"));
			WebDriver_Functions.Click(By.name("contactAccountSubmit"));
			String SourceText = DriverFactory.getInstance().getDriver().getPageSource();
			
			int intStartingPoint;
			String start = "name=\"";
			String end  = "\" value=\"";
			
			String StartingPoint = "";
			for (int k = 0; k < 2; k++) {
				StartingPoint = "&lt;streetLine&gt;";
				if (SourceText.indexOf(StartingPoint) < 0){
					StartingPoint = "&lt;customer:streetLine&gt;";
				}else {
					SourceText = SourceText.substring(SourceText.indexOf(StartingPoint) + StartingPoint.length(), SourceText.length());
				}
				SourceText = SourceText.substring(SourceText.indexOf(StartingPoint) + StartingPoint.length(), SourceText.length());
				
				
				Streetline1 = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				
				StartingPoint = "additionalLine1&gt;";//save if the account number has an address line1 value
				if(SourceText.indexOf(StartingPoint) > 0){
					intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
					SourceText = SourceText.substring(intStartingPoint, SourceText.length());
					Streetline2 = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				StartingPoint = "geoPoliticalSubdivision2&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					City = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				StartingPoint = "geoPoliticalSubdivision3&gt";			
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					StateCode = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				StartingPoint = "postalCode&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					postalCode = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				
				StartingPoint = "countryCode&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				countryCode = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				
				if (postalCode.length() > 5 && countryCode.contentEquals("US")){
					postalCode = postalCode.substring(0, 5);
				}
				
				StartingPoint = "areaCode&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					areaCode = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				StartingPoint = "phoneNumber&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					phoneNumber = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				//remove any special characters
				String AccountDetails[] = {Streetline1, Streetline2, City, State, StateCode, postalCode, countryCode};
				for (int i = 0; i < AccountDetails.length; i++){
					String nfdNormalizedString = Normalizer.normalize(AccountDetails[i], Normalizer.Form.NFD); 
					Pattern pattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");
					AccountDetails[i] = pattern.matcher(nfdNormalizedString).replaceAll("");
				}
				
				if (countryCode.length() > 5 || countryCode.length() == 0){
					return null;
				}
				
				if (k == 0) {
					Account_Details.Shipping_Address_Line_1 = Streetline1;
					Account_Details.Shipping_Address_Line_2 = Streetline2;
					Account_Details.Shipping_City = City;
					Account_Details.Shipping_State = State;
					Account_Details.Shipping_State_Code = StateCode;
					Account_Details.Shipping_Phone_Number = areaCode + phoneNumber;
					Account_Details.Shipping_Zip = postalCode;
					Account_Details.Shipping_Country_Code = countryCode;
					Account_Details.Shipping_Region = "";
					Account_Details.Shipping_Country = "";
				}else if (k == 1) {
					Account_Details.Billing_Address_Line_1 = Streetline1;
					Account_Details.Billing_Address_Line_2 = Streetline2;
					Account_Details.Billing_City = City;
					Account_Details.Billing_State = State;
					Account_Details.Billing_State_Code = StateCode;
					Account_Details.Billing_Phone_Number = areaCode + phoneNumber;
					Account_Details.Billing_Zip = postalCode;
					Account_Details.Billing_Country_Code = countryCode;
					Account_Details.Billing_Region = "";
					Account_Details.Billing_Country = "";
				}
				
			}
			
			WebDriver_Functions.ChangeURL("JSP_Express", "US", false);
			WebDriver_Functions.Select(By.id("express"), "expressCreditCard", "v");
			WebDriver_Functions.Click(By.name("expressSubmit"));
			
			SourceText = DriverFactory.getInstance().getDriver().getPageSource();
			//if the account is linked to a credit card.
			String Credit_Card_Type = "", Credit_Card_Number = "", Credit_Card_CVV = "", Credit_Card_Expiration_Month = "", Credit_Card_Expiration_Year = "", Invoice_Number_A = "", Invoice_Number_B = "";
			
			if (SourceText.contains("creditCardId&gt")) {
				StartingPoint = "creditCardId&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					Credit_Card_Number = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				Credit_Card_Number = Credit_Card_Number.substring(Credit_Card_Number.length() - 4, Credit_Card_Number.length());
				String Credit_Lookup[] = Helper_Functions.LoadCreditCard(Credit_Card_Number);
				Credit_Card_Type = Credit_Lookup[0];
				Credit_Card_Number = Credit_Lookup[1];
				Credit_Card_CVV = Credit_Lookup[2];
				Credit_Card_Expiration_Month = Credit_Lookup[3];
				Credit_Card_Expiration_Year = Credit_Lookup[4];
						
			}else {
				//load dummy invoice numbers
				Invoice_Number_A = "750000000";
				Invoice_Number_B = "750000001";
			}
			
			Account_Details.Account_Number = AccountNumber;
			Account_Details.Credit_Card_Type = Credit_Card_Type;
			Account_Details.Credit_Card_Number = Credit_Card_Number;
			Account_Details.Credit_Card_CVV = Credit_Card_CVV;
			Account_Details.Credit_Card_Expiration_Month = Credit_Card_Expiration_Month;
			Account_Details.Credit_Card_Expiration_Year = Credit_Card_Expiration_Year;
			Account_Details.Invoice_Number_A = Invoice_Number_A;
			Account_Details.Invoice_Number_B = Invoice_Number_B;
			Account_Details.Account_Type = "";
			Account_Details.Tax_ID_One = "";
			Account_Details.Tax_ID_Two = "";
			PrintOut("Address Returned: " + Streetline1 + " " + Streetline2 + " " + City+ " " + State+ " " + StateCode+ " " +postalCode+ " " + countryCode, true);
			return Account_Details;
 		}catch (Exception e){
 			e.printStackTrace();
 			PrintOut("Not able to fully retrieve address: " + Streetline1 + " " + Streetline2 + " " + City+ " " + State+ " " + StateCode+ " " +postalCode+ " " + countryCode, true);
			throw e;
 		}
 	}
}
