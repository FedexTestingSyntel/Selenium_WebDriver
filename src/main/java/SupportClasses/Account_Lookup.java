package SupportClasses;

import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Pattern;
import org.openqa.selenium.By;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import Data_Structures.Account_Data;

@Listeners(SupportClasses.TestNG_TestListener.class)

public class Account_Lookup extends Helper_Functions{
	static String LevelToTest = "2";

	@BeforeClass
	public void beforeClass() {
		Environment.SetLevelsToTest(LevelToTest);
	}
	
	@DataProvider (parallel = true)
	public static Iterator<Object[]> dp() {
		List<Object[]> data = new ArrayList<Object[]>();
		
		//String AccountsNumbers[] = new String[] {"761391380", "761391500", "761391640", "761391720", "761391780", "761391860"};
		//String AccountsNumbers[] = new String[] {"642531069", "642141724", "642141740", "642531565", "642531581", "642531603", "642531620", "642569147", "642569163", "642141783", "642141805", "642141821", "642142240", "642142267", "642142283", "642569309", "642569325", "642569341", "642569368", "642569384", "642569406", "642304305", "642304321", "642304348", "642142364", "642142380", "642142402", "642304542", "642304569", "642304585", "642304623", "642304640", "642304666", "642570048", "642570064", "642570080", "642143000", "642143026", "642143042", "642570102", "642570129", "642570145", "642009567", "642009583", "642009605", "642304682", "642304704", "642304720", "642304747", "642304763", "642304780", "642009508", "642009524", "642009540", "642304801", "642304828", "642304844", "642304887", "642304909", "642304925", "642304941", "642304968", "642304984", "642305000", "642305026", "642305042", "642305069", "642305085", "642305107", "642211544", "642211560", "642211587", "642211641", "642211668", "642211684", "642211706", "642211722", "642211749", "642211781", "642211803", "642211820", "642211846", "642211862", "642211889", "642211900", "642211927", "642211943", "642211960", "642211986", "642212001", "642212109", "642212125", "642212141", "642212044", "642212060", "642212087", "642212206", "642212222", "642212249", "642212265", "642212281", "642212303", "642212362", "642212389", "642212400", "642212427", "642212443", "642212460", "642212486", "642212508", "642212524", "642212567", "642212583", "642212605", "642212621", "642212648", "642212664", "642212702", "642212729", "642212745", "642212761", "642212788", "642212800", "642212826", "642212842", "642212869", "642455621", "642455648", "642455664", "642455680", "642455702", "642455729", "642455745", "642455761", "642455788", "642455826", "642455842", "642455869", "642455966", "642455982", "642456008", "642456024", "642456040", "642456067", "642456083", "642456105", "642456121", "642456148", "642456164", "642456180", "642456229", "642456245", "642456261", "642456300", "642456326", "642456288", "642456342", "642456369", "642456385", "642456440", "642456466", "642456482", "642456504", "642456520", "642456547", "642456563", "642494104", "642494120", "642494163", "642494180", "642494201", "642494228", "642494244", "642494260", "642494309", "642494325", "642494341", "642494384", "642494406", "642494422", "642494449", "642494465", "642494481", "642494503", "642494520", "642494546", "642494562", "642494589", "642494600", "642494627", "642494643", "642494660", "642494686", "642494708", "642494724", "642537407", "642537423", "642537440", "642537482", "642537504", "642537520", "642537547", "642537563", "642537580", "642537601", "642537628", "642537644", "642097903", "642097920", "642097946", "642097962", "642097989", "642098004", "642098020", "642098047", "642098063", "642098080", "642098101", "642098128", "642098144", "642098160", "642098187", "642098209", "642098225", "642098241", "642098268", "642098284", "642098306", "642098322", "642098349", "642098365", "642305140", "642305166", "642305182", "642098381", "642098403", "642098420", "642098446", "642098462", "642098489", "642098500", "642098527", "642098543", "642098560", "642098586", "642098608", "642098624", "642098640", "642098667", "642098683", "642098705", "642098721", "642098748", "642098764", "642098780", "642098802", "642136380", "642136402", "642136429", "642136445", "642136461", "642136488", "642136500", "642136526", "642136542", "642136569", "642136585", "642136607", "642136623", "642136640", "642136666", "642136682", "642136704", "642136720", "642136747", "642136763", "642136780", "642136801", "642136828", "642136844", "642136860", "642136887", "642136909", "642136925", "642136941", "642136968", "642136984", "642137000", "642137026", "642137042", "642137069", "642137085", "642137107", "642137123", "642137140", "642137166", "642137182", "642137204", "642137220", "642137247", "642137263", "642137280", "642137301", "642137328", "642137344", "642137360", "642137387", "642137409", "642137425", "642305204", "642305220", "642305247", "642137565", "642137581", "642137603", "642137620", "642137646", "642137662", "642137689", "642137700", "642137727", "642137743", "642137760", "642137786", "642137824", "642137840", "642137867", "642137883", "642137905", "642137921", "642137948", "642137964", "642137980", "642138006", "642138022", "642138049", "642138065", "642138081", "642138103", "642305263", "642305280", "642305301", "642138464", "642138480", "642138502", "642138529", "642138545", "642138561", "642138588", "642138600", "642138626", "642138642", "642138669", "642138685", "642138707", "642138723", "642138740", "642138766", "642138782", "642138804", "642138820", "642138847", "642138863", "642138880", "642176404", "642176420", "642305328", "642305344", "642305360", "642176447", "642176463", "642176480", "642176501", "642176528", "642176544", "642176560", "642176587", "642176609", "642176625", "642176641", "642176668", "642142941", "642142968", "642142984", "642142887", "642142909", "642142925", "642176684", "642176706", "642176722", "642176749", "642176765", "642176781", "642176803", "642176820", "642176846", "642176862", "642176889", "642176900", "642176927", "642176943", "642176960", "642176986", "642177001", "642177028", "642177044", "642177060", "642177087", "642177109", "642177125", "642177141", "642305387", "642305409", "642305425", "642143069", "642143085", "642143107", "642143166", "642143182", "642143204", "642305441", "642305468", "642305484", "642177400", "642177427", "642177443", "642305506", "642305522", "642305549", "642177460", "642177486", "642177508", "642177524", "642177540", "642177567", "642177583", "642177605", "642177621", "642177648", "642177664", "642177680", "642177702", "642177729", "642177745", "642305565", "642305581", "642305603", "642305646", "642305662", "642305689", "642177761", "642177788", "642177800", "642177826", "642177842", "642177869", "642177885", "642177907", "642177923", "642177940", "642177966", "642177982", "642178008", "642178024", "642178040", "642306065", "642306081", "642306103", "642178067", "642178083", "642178105", "642178121", "642178148", "642178164", "642178180", "642178202", "642178229", "642178245", "642178261", "642178288", "642306120", "642306146", "642306162", "642178300", "642178326", "642178342", "642306308", "642306324", "642306340", "642142763", "642142780", "642142801", "642142682", "642142704", "642142720", "642142623", "642142640", "642142666", "642142569", "642142585", "642142607", "642178369", "642178385", "642178407", "642142500", "642142526", "642142542", "642178423", "642178440", "642178466", "642142445", "642142461", "642142488", "642178547", "642178563", "642178580", "642306367", "642306383", "642306405", "642178601", "642178628", "642178644", "642178660", "642178687", "642178709", "642142305", "642142321", "642142348", "642306421", "642306448", "642306464", "642177346", "642177362", "642177389", "642306480", "642344005", "642344021", "642177281", "642177303", "642177320", "642177222", "642177249", "642177265", "642177168", "642177184", "642177206"};

		String AccountsNumbers[] = new String[] {"784800660", "784801020", "762982960", "762983060", "762983320", "762983400", "762983460", "762983540", "762983680", "762983800", "762983940", "797694800", "797694860", "797694940", "797695220", "797695300", "797695360", "797695440", "797695580", "797695700", "797695840", "751231580", "751231660", "751231920", "751232020", "751232080", "751232160", "751232420", "751232500", "751232560", "751232640", "797695920", "797695980", "797696080", "797696200", "797696340", "797696420", "797696480", "797696560", "797696820", "797696900", "751233760", "751234040", "751234120", "751234180", "751234260", "751234520", "751234600", "751234660", "751234740", "751234880", "797696960", "797697060", "797697320", "797697400", "797697460", "797697540", "797697680", "797697800", "797697940", "797698040", "797698180", "797698300", "797698440", "797698520", "797698580", "797698660", "797698920", "797699020", "797699080", "797699160", "797699420", "797699500", "797699560", "797699640", "797699780", "797699900", "797700100", "797700240", "797700320", "797700380", "797700460", "797700720", "797700800", "797700860", "797700940", "797701220", "797701300", "797701360", "797701440", "797701580", "797701700", "797701840", "797701920", "797701980", "797702080", "797702200", "797702340", "797702420", "797702480", "797702560", "797702820", "797702900", "797702960", "797703060", "797703320", "797703400", "797703460", "797703540", "797703680", "797703800", "797703940", "797704040", "797704180", "797704300", "797704440", "797704520", "797704580", "797704660", "797704920", "797705020", "797705080", "797705160", "797705420", "797705500", "797705560", "797705640", "797705780", "797705900", "797706000", "797706060", "797706140", "797706280", "797706400", "797706540", "797706620", "797706680", "797706760", "797707040", "797707120", "797404640", "761243160", "761243420", "761243500", "761243560", "761243640", "761243780", "761243900", "761244000", "761244060", "761244140", "797404780", "797404900", "797405000", "797405060", "797405140", "797405280", "797405400", "797405540", "797405620", "797405680", "797405760", "797406040", "797406120", "797406180", "797406260", "797406520", "797406600", "797406660", "797406740", "797406880", "797407020", "797407100", "797407160", "797407240", "797407380", "797407500", "797407640", "797407720", "797407780", "797407860", "797408000", "797408140", "797408220", "797408280", "797408360", "797408620", "797408700", "797408760", "797408840", "797408980", "797409120", "797409200", "797409260", "797409340", "797409480", "797409600", "797409740", "797409820", "797409880", "797409960", "797410020", "797410080", "797410160", "797410420", "797410500", "797410560", "797410640", "797410780", "797410900", "797411000", "797411060", "797411140", "797411280", "797411400", "797411540", "797411620", "797411680", "797411760", "797412040", "797412120", "797412180", "797412260", "797412520", "797412600", "797412660", "797412740", "797412880", "797413020", "797413100", "797413160", "797413240", "797413380", "797413500", "797413640", "797413720", "797413780", "797413860", "797414000", "797414140", "797414220", "797414280", "797414360", "797414620", "797414700", "797414760", "797414840", "797414980", "797415120", "797415200", "797415260", "797415340", "797415480", "797415600", "797415740", "797415820", "797415880", "797415960", "797416100", "797416240", "797416320", "797416380", "797416460", "797416720", "797416800", "797416860", "797416940", "797417220", "797417300", "797417360", "797417440", "761867180", "761867300", "761867440", "761867520", "761867580", "761867660", "761867920", "761868020", "761868080", "761868160", "761868420", "761868500", "761868560", "761868640", "761868780", "761868900", "762061180", "762061260", "762061520", "762061600", "762062720", "762062780", "762062860", "762063000", "762063140", "762063220", "762063280", "762063360", "762063620", "762063700", "762717760", "762717840", "762717980", "762718120", "762718200", "762718260", "762718340", "762718480", "762718600", "762718740", "763288900", "763288960", "763289060", "763289320", "763289400", "763289460", "763289540", "763289680", "763289800", "763289940", "762063760", "762063840", "762063980", "762064120", "762064200", "762064260", "762064340", "762064480", "762064600", "762064740", "762061660", "762061740", "762061880", "762062020", "762062100", "762062160", "762062240", "762062380", "762062500", "762062640", "762716720", "762716780", "762716860", "762717000", "762717140", "762717220", "762717280", "762717360", "762717620", "762717700", "762715660", "762715740", "762715880", "762716020", "762716100", "762716160", "762716240", "762716380", "762716500", "762716640", "762719860", "762719940", "762720000", "762720060", "762720140", "762720280", "762720400", "762720540", "762720620", "762720680", "762718820", "762718880", "762718960", "762719100", "762719240", "762719320", "762719380", "762719460", "762719720", "762719800", "762720760", "762721040", "762721120", "762721180", "762721260", "762927640", "762927780", "762927900", "762928000", "762928060", "762443660", "762443740", "762443880", "762444020", "762444100", "762444160", "762444240", "762444380", "762444500", "762444640", "762928140", "762928280", "762928400", "762928540", "762928620", "762928680", "762928760", "762929040", "762929120", "762929180", "762929260", "762929520", "762929600", "762929660", "762929740", "762929880", "762930080", "762930200", "762930340", "762930420", "762931680", "762931800", "762931940", "762932040", "762932180", "762932300", "762932440", "762932520", "762932580", "762932660", "762930480", "762930560", "762930820", "762930900", "762930960", "762931060", "762931320", "762931400", "762931460", "762931540", "762934000", "762934060", "762934140", "762934280", "762934400", "762934540", "762934620", "762934680", "762934760", "762935040", "762935120", "762935180", "762935260", "762935520", "762935600", "762935660", "762935740", "762935880", "762936020", "762936100", "762932920", "762933020", "762933080", "762933160", "762933420", "762933500", "762933560", "762933640", "762933780", "762933900", "762937220", "762937280", "762937360", "762937620", "762937700", "762937760", "762937840", "762937980", "762938120", "762938200", "762936160", "762936240", "762936380", "762936500", "762936640", "762936720", "762936780", "762936860", "762937000", "762937140", "761240560", "761240820", "761240900", "761240960", "761241060", "761241320", "761241400", "761241460", "761241540", "761241680", "762938260", "762938340", "762938480", "762938600", "762938740", "762938820", "762938880", "762938960", "762939100", "762939240", "762939320", "762939380", "762939460", "762939720", "762939800", "762939860", "762939940", "762940000", "762940060", "762940140", "762940280", "762940400", "762940540", "762940620", "762940680", "762940760", "762941040", "762941120", "762941180", "762941260", "763148220", "763148300", "763148360", "763148440", "763148580", "763148700", "763148840", "763148920", "763148980", "763149080", "763151220", "763151280", "763151360", "763151620", "763151700", "763151760", "763151840", "763151980", "763152120", "763152200", "763149200", "763149340", "763149420", "763149480", "763149560", "763149820", "763149900", "763149960", "763150020", "763150100", "763150160", "763150240", "763150380", "763150500", "763150640", "763150720", "763150780", "763150860", "763151000", "763151140", "763152260", "763152340", "763152480", "763152600", "763152740", "763152820", "763152880", "763152960", "763153100", "763153240", "763153320", "763153380", "763153460", "763153720", "763153800", "763153860", "763153940", "763154220", "763154300", "763154360", "763154440", "763154580", "763154700", "763154840", "763154920", "763154980", "763155080", "763155200", "763155340", "763155420", "763155480", "763155560", "763155820", "763155900", "763155960", "763156060", "763156320", "763156400", "763156460", "763156540", "763156680", "763156800", "763156940", "763157040", "763157180", "763157300", "763157440", "763157520", "763157580", "763157660", "763157920", "763158020", "763158080", "763158160", "763158420", "763158500", "763158560", "763158640", "763158780", "763158900", "763159000", "763159060", "763159140", "763159280", "763159400", "763159540", "763159620", "763159680", "763159760", "763160220", "763160300", "763160360", "763160440", "763160580", "763160700", "763160840", "763160920", "763160980", "763161080", "763161200", "763161340", "763161420", "763161480", "763161560", "763161820", "763368300", "763368360", "763368440", "763368580", "763368700", "763368840", "763368920", "763368980", "763369080", "763369200", "763369340", "763369420", "763369480", "763369560", "763369820", "763371840", "763371980", "763372120", "763372200", "763372260", "763372340", "763372480", "763372600", "763372740", "763372820", "763369900", "763369960", "763370020", "763370100", "763370160", "763370240", "763370380", "763370500", "763370640", "763370720", "763370780", "763370860", "763371000", "763371140", "763371220", "763371280", "763371360", "763371620", "763371700", "763371760", "763372880", "763372960", "763373100", "763373240", "763373320", "763373380", "763373460", "763373720", "763373800", "763373860", "763373940", "763374220", "763374300", "763374360", "763374440", "763374580", "763374700", "763374840", "763374920", "763374980", "763375080", "763375200", "763375340", "763375420", "763375480", "763375560", "763375820", "763375900", "763375960", "763376060", "763376320", "763376400", "763376460", "763376540", "763376680", "763376800", "763376940", "763377040", "763377180", "763377300", "763381480", "763381560", "763381820", "763381900", "760122580", "760122700", "760122840", "760122920", "760122980", "760123080", "763377580", "763377660", "763377920", "763378020", "763378080", "763378160", "763378420", "763378500", "763378560", "763378640", "763379140", "763379280", "763379400", "763379540", "763379620", "763379680", "763379760", "763380220", "763380300", "763380360", "763380440", "763380580", "763380700", "763380840", "763380920", "763380980", "763381080", "763381200", "763381340", "763381420", "760123200", "760123340", "760123420", "760123480", "760123560", "760123820", "760123900", "760123960", "760124060", "760124320", "760125520", "760125580", "760125660", "760125920", "760126020", "760126080", "760126160", "760126420", "760126500", "760126560", "760124400", "760124460", "760124540", "760124680", "760124800", "760124940", "760125040", "760125180", "760125300", "760125440", "760126640", "760126780", "760126900", "760127000", "760127060", "760127140", "760127280", "760127400", "760127540", "760127620", "760127680", "760127760", "760128040", "760128120", "760128180", "760128260", "760128520", "760128600", "760128660", "760128740", "760129020", "760129100", "760129160", "760129240", "760129380", "760129500", "760129640", "760129720", "760129780", "760129860", "760130060", "760130320", "760130400", "760130460", "760130540", "760130680", "760130800", "760130940", "760131040", "760131180", "760131300", "760131440", "760131520", "760131580", "760131660", "760131920", "760132020", "760132080", "760132160", "760132420", "760132500", "760132560", "760132640", "760132780", "760132900", "760133000", "760133060", "760133140", "760133280", "760133400", "760133540", "760133620", "760133680", "760133760", "760134040", "760134120", "760134180", "760134260", "760134520", "760134600", "760134660", "760134740", "760134880", "760135020", "760135100", "760135160", "760135240", "760135380", "760135500", "760342840", "760342920", "760342980", "760343080", "760343200", "760343340", "760343420", "760343480", "760343560", "760343820", "760135640", "760135720", "760135780", "760135860", "760136000", "760136140", "760136220", "760136280", "760136360", "760342700", "760343900", "760343960", "760344060", "760344320", "760344400", "760344460", "760344540", "760344680", "760344800", "760344940", "760345040", "760345180", "760345300", "760345440", "760345520", "760345580", "760345660", "760345920", "760346020", "760346080", "760346160", "760346420", "760346500", "760346560", "760346640", "760346780", "760346900", "760347000", "760347060", "760347140", "760349500", "760349640", "760349720", "760349780", "760349860", "760350060", "760350320", "760350400", "760350460", "760350540", "760347280", "760347400", "760347540", "760347620", "760347680", "760347760", "760348040", "760348120", "760348180", "760348260", "760348520", "760348600", "760348660", "760348740", "760348880", "760349020", "760349100", "760349160", "760349240", "760349380", "760350800", "760350940", "760351040", "760351180", "760351300", "760351440", "760351520", "760351580", "760351660", "760351920", "760352020", "760352080", "760352160", "760352420", "760352500", "760352560", "760352640", "760352780", "760352900", "760353000", "760353060", "760353140", "760353280", "760353400", "760353540", "760353620", "760353680", "760353760", "760354040", "760354120", "760354180", "760354260", "760354520", "760354600", "760354660", "760354740", "760354880", "760355020", "760355100", "760355160", "760355380", "760355500", "760355640", "760355720", "760355780", "760355860", "760356000", "760356140", "760356220", "760356280", "760356360", "760356620", "760562700", "760562840", "760562920", "760562980", "760563080", "760563200", "760563340", "760563420", "760563480", "760563560", "760563820", "760563900", "760563960", "760564060", "760564320", "760564400", "760564460", "760564540", "760564800", "760564940", "760565040", "760565180", "760565300", "760565440", "760565520", "760565580", "760565660", "760565920", "760567060", "760567140", "760567280", "760567400", "760567540", "760567620", "760567680", "760567760", "760568040", "760568120", "760570540", "760570680", "760570800", "760570940", "760571040", "760571180", "760571300", "760571440", "760571520", "760571580", "760569380", "760569500", "760569640", "760569720", "760569780", "760569860", "760570060", "760570320", "760570400", "760570460", "760568260", "760568520", "760568600", "760568660", "760568740", "760568880", "760569020", "760569100", "760569160", "760569240", "760571920", "760572020", "760572080", "760572160", "760572420", "760572500", "760572560", "760572640", "760572780", "760572900", "760573000", "760573060", "760573140", "760573280", "760573400", "760573540", "760573620", "760573680", "760573760", "760574040", "760574120", "760574180", "760574260", "760574520", "760574600", "760574660", "760574740", "760574880", "760575020", "760575100", "760783340", "760783420", "760783480", "760783560", "760783820", "760783900", "760783960", "760784060", "760784320", "760784400", "760575160", "760575240", "760575380", "760575500", "760575640", "760575720", "760575780", "760575860", "760576000", "760576140", "760576220", "760576280", "760576360", "760576620", "760782700", "760782840", "760782920", "760782980", "760783080", "760783200", "760784460", "760784540", "760784680", "760784800", "760784940", "760785040", "760785180", "760785300", "760785440", "760785520", "760785580", "760785660", "760785920", "760786020", "760786080", "760786160", "760786420", "760786500", "760786560", "760786640", "760786780", "760786900", "760787000", "760787060", "760787140", "760787280", "760787400", "760787540", "760787620", "760787680", "760790060", "760790320", "760790400", "760790460", "760790540", "760790680", "760790800", "760790940", "760791040", "760791180", "760787760", "760788040", "760788120", "760788180", "760788260", "760788520", "760788600", "760788660", "760788740", "760788880", "760789020", "760789100", "760789160", "760789240", "760789380", "760789500", "760789640", "760789720", "760789780", "760789860", "760791300", "760791440", "760791520", "760791580", "760791660", "760791920", "760792020", "760792080", "760792160", "760792420", "760792500", "760792560", "760792640", "760792780", "760792900", "760793000", "760793060", "760793140", "760793280", "760793400", "760795720", "760795780", "760795860", "760796000", "760796140", "760796220", "760796280", "760796360", "760796620", "761002660", "760793540", "760793620", "760793680", "760793760", "760794040", "760794120", "760794180", "760794260", "760794520", "760794600", "760794660", "760794740", "760794880", "760795020", "760795100", "760795160", "760795240", "760795380", "760795500", "760795640", "761002740", "761002880", "761003020", "761003100", "761003160", "761003240", "761003380", "761003500", "761003640", "761003720", "761005880", "761005960", "761006100", "761006240", "761006320", "761006380", "761006460", "761006720", "761006800", "761006860", "761003780", "761003860", "761004000", "761004140", "761004220", "761004280", "761004360", "761004620", "761004700", "761004760", "761004840", "761004980", "761005120", "761005200", "761005260", "761005340", "761005480", "761005600", "761005740", "761005820", "761006940", "761007220", "761007300", "761007360", "761007440", "761007580", "761007700", "761007840", "761007920", "761007980", "761010760", "761010840", "761010980", "761011120", "761011200", "761011260", "761011340", "761011480", "761011600", "761011740", "761008080", "761008200", "761008340", "761008420", "761008480", "761008560", "761008820", "761008900", "761008960", "761009060", "761009400", "761009460", "761009540", "761009680", "761009800", "761009940", "761010000", "761010140", "761010220", "761010280", "761011820", "761011880", "761011960", "761012100", "761012240", "761012320", "761012380", "761012460", "761012720", "761012800", "761013220", "761013300", "761013360", "761013440", "761013580", "761013700", "761013840", "761013920", "761013980", "761014080", "761014200", "761014340", "761014420", "761014480", "761014560", "761014820", "761014900", "761014960", "761015060", "761015320", "761015400", "761015460", "761015540", "761015680", "761015800", "761015940", "761016040", "761016180", "761222660", "761222740", "761222880", "761223020", "761223100", "761223160", "761223240", "761223380", "761223500", "761223640", "761223720", "761223780", "761223860", "761224000", "761224140", "761224220", "761224280", "761224360", "761224620", "761224700", "761224760", "761224840", "761225960", "761226100", "761226240", "761226320", "761226380", "761226460", "761226720", "761226800", "761226860", "761226940", "761227220", "761227300", "761227360", "761227440", "761227580", "761227700", "761227840", "761227920", "761227980", "761228080", "761224980", "761225120", "761225200", "761225260", "761225340", "761225480", "761225600", "761225740", "761225820", "761225880", "761230360", "761230620", "761230700", "761230760", "761230840", "761230980", "761231120", "761231200", "761231260", "761231340", "761228200", "761228340", "761228420", "761228480", "761228560", "761228820", "761228900", "761228960", "761229060", "761229320", "761229400", "761229460", "761229540", "761229680", "761229800", "761229940", "761230000", "761230140", "761230220", "761230280", "761231480", "761231600", "761231740", "761231820", "761231880", "761231960", "761232100", "761232240", "761232320", "761232380", "761232460", "761232720", "761232800", "761232860", "761232940", "761233220", "761233300", "761233360", "761233440", "761233580", "761234820", "761234900", "761234960", "761235060", "761235320", "761235400", "761235460", "761235540", "761235680", "761235800", "761235940", "761236040", "761236180", "761442660", "761442740", "761442880", "761443020", "761443100", "761443160", "761443240", "761233700", "761233840", "761233920", "761233980", "761234080", "761234200", "761234340", "761234420", "761234480", "761234560", "761443380", "761443500", "761443640", "761443720", "761443780", "761443860", "761444000", "761444140", "761444220", "761444280", "761444360", "761444620", "761444700", "761444760", "761444840", "761444980", "761445120", "761445200", "761445260", "761445340", "761445480", "761445600", "761445740", "761445820", "761445880", "761445960", "761446100", "761446240", "761446320", "761446380", "761446460", "761446720", "761446800", "761446860", "761446940", "761447220", "761447300", "761447360", "761447440", "761447580", "761447700", "761447840", "761447920", "761447980", "761448080", "761448200", "761448340", "761448420", "761448480", "761448560", "761449460", "761449540", "761449680", "761449800", "761449940", "761450000", "761450140", "761450220", "761450280", "761450360", "761451600", "761451740", "761451820", "761451880", "761451960", "761452100", "761452240", "761452320", "761452380", "761452460", "761450620", "761450700", "761450760", "761450840", "761450980", "761451120", "761451200", "761451260", "761451340", "761451480", "761454900", "761454960", "761455060", "761455320", "761455400", "761455460", "761455540", "761455680", "761455800", "761455940", "761453840", "761453920", "761453980", "761454080", "761454200", "761454340", "761454420", "761454480", "761454560", "761454820", "761456040", "761456180", "761648900", "761649000", "761649060", "761649140", "761649280", "761649400", "761649540", "761649620", "761649680", "761649760", "761650220", "761650300", "761650360", "761650440", "761650580", "761650700", "761650840", "761650920", "761650980", "761651080", "761651200", "761651340", "761651420", "761651480", "761651560", "761651820", "761651900", "761651960", "761652060", "761652320", "761652400", "761652460", "761652540", "761652680", "761652800", "761652940", "761653040", "761653180", "761653300", "761653440", "761653520", "761653580", "761653660", "761653920", "761654020", "761654080", "761654160", "761654420", "761654500", "761654560", "761654640", "761654780", "761654900", "761655000", "761655060", "761655140", "761655280", "761655400", "761655540", "761655620", "761655680", "761655760", "761656040", "761656120", "761656180", "761656260", "761656520", "761656600", "761657720", "761657780", "761657860", "761658000", "761658140", "761658220", "761658280", "761658360", "761658620", "761658700", "761659820", "761659880", "761659960", "761660020", "761660080", "761660160", "761660420", "761660500", "761660560", "761660640", "761656660", "761656740", "761656880", "761657020", "761657100", "761657160", "761657240", "761657380", "761657500", "761657640", "761658760", "761658840", "761658980", "761659120", "761659200", "761659260", "761659340", "761659480", "761659600", "761659740", "761661760", "761662040", "761662120", "761662180", "761662260", "761662520", "761662600", "761855360", "761855620", "761855700", "761855760", "761855840", "761855980", "761856120", "761856200", "761856260", "761856340", "761856480", "761856600", "761856740", "761660780", "761660900", "761661000", "761661060", "761661140", "761661280", "761661400", "761661540", "761661620", "761661680", "761857860", "761857940", "761858220", "761858300", "761858360", "761858440", "761858580", "761858700", "761858840", "761858920", "761856820", "761856880", "761856960", "761857100", "761857240", "761857320", "761857380", "761857460", "761857720", "761857800", "761858980", "761859080", "761859200", "761859340", "761859420", "761859480", "761859560", "761859820", "761859900", "761859960", "761860020", "761860100", "761860160", "761860240", "761860380", "761860500", "761860640", "761860720", "761860780", "761860860", "761863100", "761863240", "761863320", "761863380", "761863460", "761863720", "761863800", "761863860", "761863940", "761864220", "761861000", "761861140", "761861220", "761861280", "761861360", "761861620", "761861700", "761861760", "761861840", "761861980", "761862120", "761862200", "761862260", "761862340", "761862480", "761862600", "761862740", "761862820", "761862880", "761862960", "761864300", "761864360", "761864440", "761864580", "761864700", "761864840", "761864920", "761864980", "761865080", "761865200", "761865340", "761865420", "761865480", "761865560", "761865820", "761865900", "761865960", "761866060", "761866320", "761866400"};
		DriverFactory.WaitTimeOut = 5;
		Account_Data Data[] = Environment.getAccountDetails(LevelToTest);
		String AccountsAlreadyPresent = "";
		for (int i = 0; i < Data.length - 1; i++) {
			AccountsAlreadyPresent+= Data[i].Account_Number + " ";
		}
		for (String S: AccountsNumbers) {
			if (!AccountsAlreadyPresent.contains(S)) {
				data.add( new Object[] {LevelToTest, S});
			}
		}	
		return data.iterator();
	}
	
	@Test(dataProvider = "dp")
	public static void AccountCheck(String Level, String Account_Number){
		
		//Helper_Functions.PrintOut("breakpoint", false);
		try {
			
			Account_Data Account_Info[] = new Account_Data[] {Account_DataAccountDetails(Account_Number, Level)};
			Create_Accounts.writeAccountsToExcel(Account_Info);
		} catch (Exception e) {
			Assert.fail(e.getMessage());
		}
	}//end WRTT_Rate_Sheet
	
	//String[] {Streetline1 - 0, Streetline2 - 1, City - 2, State - 3, StateCode - 4, postalCode - 5, countryCode - 6};
	public static Account_Data Account_DataAccountDetails(String AccountNumber, String Level){
		Account_Data Account_Details = new Account_Data();
		String Streetline1 = "", Streetline2 = "", City ="", State ="", StateCode = "", postalCode = "", countryCode = "", areaCode = "", phoneNumber = "";
		Environment.getInstance().setLevel(Level);
		String TempLevel = "L" + Environment.getInstance().getLevel();
		Account_Details.Level = Environment.getInstance().getLevel();
		if (!"L1L2L3L4".contains(TempLevel)){
			PrintOut("Invalid Level to find account number detials, checking account vs L3", true);
			TempLevel = "L3";
		}
 		try {
 			PrintOut("Account number " + AccountNumber + " recieved from " + Thread.currentThread().getStackTrace()[2].getMethodName(), true);
 			WebDriver_Functions.ChangeURL("JSP", "US", false);
 			WebDriver_Functions.Type(By.name("contactAccountNumber"), AccountNumber);
 			WebDriver_Functions.Type(By.name("contactAccountOpCo"), "FX");

 		    //selects the correct radio button for the level, only works for 1,2,3,4
 			WebDriver_Functions.Click(By.xpath("//input[(@name='contactLevel') and (@value = '" + TempLevel + "')]"));
			WebDriver_Functions.Click(By.name("contactAccountSubmit"));
			String SourceText = DriverFactory.getInstance().getDriver().getPageSource();
			
			int intStartingPoint;
			String start = "name=\"";
			String end  = "\" value=\"";
			
			String StartingPoint = "";
			for (int k = 0; k < 2; k++) {
				StartingPoint = "&lt;streetLine&gt;";
				if (SourceText.indexOf(StartingPoint) < 0){
					StartingPoint = "&lt;customer:streetLine&gt;";
				}else {
					SourceText = SourceText.substring(SourceText.indexOf(StartingPoint) + StartingPoint.length(), SourceText.length());
				}
				SourceText = SourceText.substring(SourceText.indexOf(StartingPoint) + StartingPoint.length(), SourceText.length());
				
				
				Streetline1 = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				
				StartingPoint = "additionalLine1&gt;";//save if the account number has an address line1 value
				if(SourceText.indexOf(StartingPoint) > 0){
					intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
					SourceText = SourceText.substring(intStartingPoint, SourceText.length());
					Streetline2 = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				StartingPoint = "geoPoliticalSubdivision2&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					City = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				StartingPoint = "geoPoliticalSubdivision3&gt";			
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					StateCode = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				StartingPoint = "postalCode&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					postalCode = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				
				StartingPoint = "countryCode&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				countryCode = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				
				if (postalCode.length() > 5 && countryCode.contentEquals("US")){
					postalCode = postalCode.substring(0, 5);
				}
				
				StartingPoint = "areaCode&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					areaCode = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				StartingPoint = "phoneNumber&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					phoneNumber = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				
				//remove any special characters
				String AccountDetails[] = {Streetline1, Streetline2, City, State, StateCode, postalCode, countryCode};
				for (int i = 0; i < AccountDetails.length; i++){
					String nfdNormalizedString = Normalizer.normalize(AccountDetails[i], Normalizer.Form.NFD); 
					Pattern pattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");
					AccountDetails[i] = pattern.matcher(nfdNormalizedString).replaceAll("");
				}
				
				if (countryCode.length() > 5 || countryCode.length() == 0){
					return null;
				}
				
				if (k == 0) {
					Account_Details.Shipping_Address_Line_1 = Streetline1;
					Account_Details.Shipping_Address_Line_2 = Streetline2;
					Account_Details.Shipping_City = City;
					Account_Details.Shipping_State = State;
					Account_Details.Shipping_State_Code = StateCode;
					Account_Details.Shipping_Phone_Number = areaCode + phoneNumber;
					Account_Details.Shipping_Zip = postalCode;
					Account_Details.Shipping_Country_Code = countryCode;
					Account_Details.Shipping_Region = "";
					Account_Details.Shipping_Country = "";
				}else if (k == 1) {
					Account_Details.Billing_Address_Line_1 = Streetline1;
					Account_Details.Billing_Address_Line_2 = Streetline2;
					Account_Details.Billing_City = City;
					Account_Details.Billing_State = State;
					Account_Details.Billing_State_Code = StateCode;
					Account_Details.Billing_Phone_Number = areaCode + phoneNumber;
					Account_Details.Billing_Zip = postalCode;
					Account_Details.Billing_Country_Code = countryCode;
					Account_Details.Billing_Region = "";
					Account_Details.Billing_Country = "";
				}
				
			}
			
			WebDriver_Functions.ChangeURL("JSP_Express", "US", false);
			WebDriver_Functions.Select(By.id("express"), "expressCreditCard", "v");
			WebDriver_Functions.Click(By.name("expressSubmit"));
			
			SourceText = DriverFactory.getInstance().getDriver().getPageSource();
			//if the account is linked to a credit card.
			String Credit_Card_Type = "", Credit_Card_Number = "", Credit_Card_CVV = "", Credit_Card_Expiration_Month = "", Credit_Card_Expiration_Year = "", Invoice_Number_A = "", Invoice_Number_B = "";
			
			if (SourceText.contains("creditCardId&gt")) {
				StartingPoint = "creditCardId&gt";
				intStartingPoint = SourceText.indexOf(StartingPoint) + StartingPoint.length();
				SourceText = SourceText.substring(intStartingPoint, SourceText.length());
				if (intStartingPoint > StartingPoint.length()){
					Credit_Card_Number = SourceText.substring(SourceText.indexOf(start) + start.length(), SourceText.indexOf(end));
				}
				Credit_Card_Number = Credit_Card_Number.substring(Credit_Card_Number.length() - 4, Credit_Card_Number.length());
				String Credit_Lookup[] = Helper_Functions.LoadCreditCard(Credit_Card_Number);
				Credit_Card_Type = Credit_Lookup[0];
				Credit_Card_Number = Credit_Lookup[1];
				Credit_Card_CVV = Credit_Lookup[2];
				Credit_Card_Expiration_Month = Credit_Lookup[3];
				Credit_Card_Expiration_Year = Credit_Lookup[4];
						
			}else {
				//load dummy invoice numbers
				Invoice_Number_A = "750000000";
				Invoice_Number_B = "750000001";
			}
			
			Account_Details.Account_Number = AccountNumber;
			Account_Details.Credit_Card_Type = Credit_Card_Type;
			Account_Details.Credit_Card_Number = Credit_Card_Number;
			Account_Details.Credit_Card_CVV = Credit_Card_CVV;
			Account_Details.Credit_Card_Expiration_Month = Credit_Card_Expiration_Month;
			Account_Details.Credit_Card_Expiration_Year = Credit_Card_Expiration_Year;
			Account_Details.Invoice_Number_A = Invoice_Number_A;
			Account_Details.Invoice_Number_B = Invoice_Number_B;
			Account_Details.Account_Type = "";
			Account_Details.Tax_ID_One = "";
			Account_Details.Tax_ID_Two = "";
			PrintOut("Address Returned: " + Streetline1 + " " + Streetline2 + " " + City+ " " + State+ " " + StateCode+ " " +postalCode+ " " + countryCode, true);
			return Account_Details;
 		}catch (Exception e){
 			e.printStackTrace();
 			PrintOut("Not able to fully retrieve address: " + Streetline1 + " " + Streetline2 + " " + City+ " " + State+ " " + StateCode+ " " +postalCode+ " " + countryCode, true);
			return null;
 		}
 	}//end AccountDetails
}
